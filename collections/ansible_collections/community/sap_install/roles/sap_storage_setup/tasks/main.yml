---

- name: SAP Storage Setup - Get facts about the OS
  ansible.builtin.setup:
    gather_subset:
      - "distribution"

- name: SAP Storage Setup - Include OS specific vars
  ansible.builtin.include_vars:
    file: "{{ ansible_os_family }}.yml"

- name: SAP Storage Setup - Install additional OS packages
  ansible.builtin.package:
    name: "{{ package_item }}"
    state: present
  loop: "{{ __sap_storage_setup_extra_packages }}"
  loop_control:
    loop_var: package_item

- name: SAP Storage Setup - Make sure services are running
  ansible.builtin.service:
    name: "{{ service_item }}"
    state: started
  loop: "{{ __sap_storage_setup_extra_services }}"
  loop_control:
    loop_var: service_item


################
# Cloud Specific Pre-Tasks - call cloud specific pre tasks thru {{ sap_storage_cloud_type }}_main.yml
################

#- name: SAP Storage Setup - Preparation for '{{ sap_storage_cloud_type }}'
#  include_tasks: "{{ sap_storage_cloud_type }}_main.yml"


# TODO: verify that the number of disks matches the fs definition
# TODO: add functionality to work with existing LVM volumes and skip disk assignment

##########
# Creating a list of unused devices that match the requested filesystem sizes, using
# - custom definition: sap_storage_setup_definition
# - ansible facts: ansible_devices
#
#########
- name: SAP Storage Setup - Make a list of unused disk devices of the requested sizes
  ansible.builtin.set_fact:
    available_devices: |
      {% set av_disks = [] %}
      {% set all_disks = (ansible_devices | dict2items) %}
      {% for disk in all_disks %}
        {%- for fs in sap_storage_setup_definition %}
          {%- if disk.value.links.uuids | length == 0
              and disk.value.partitions | length == 0
              and fs.disk_size is defined
              and (fs.disk_size | string + 'GB') in (disk.value.size | regex_replace('(\.\d+\s*)', '')) %}
            {%- set add_to_list = av_disks.append(disk) %}
          {%- endif %}
        {%- endfor %}
      {%- endfor %}
      {{ av_disks | items2dict }}

# !!
# If the DISK MATCHING syntax has changed in the above, it must also
# be adjusted in the next task
# !!

# This task assigns device names for each volume to be created.
# - custom definition: sap_storage_setup_definition
# - ansible facts: ansible-devices

- name: SAP Storage Setup - Set fact for target filesystem device mapping
  ansible.builtin.set_fact:
    filesystem_device_map: |
      {% set device_map = [] %}
      {% set av_dev = (available_devices | dict2items) %}
      {% set assigned_dev = [] %}
      {% for fs in sap_storage_setup_definition -%}
        {% set matching_dev = [] -%}

        {%- if fs.disk_size is defined
          and ('nfs' not in fs.filesystem_type | default(sap_storage_setup_local_filesystem_type))
          and fs.swap_path is not defined -%}

          {%- for dev in av_dev -%}
            {%- if (fs.disk_size | string + 'GB') in (dev.value.size | regex_replace('(\.\d+\s*)', ''))
                and dev.key not in assigned_dev
                and dev.value.holders | length == 0
                and matching_dev | length < (fs.lvm_lv_stripes | d('1') | int) %}

                {%- set assigned = assigned_dev.append(dev.key) %}
                {%- set add = matching_dev.append('/dev/' + dev.key) %}

            {%- endif %}
          {%- endfor %}

          {%- if matching_dev | length > 0 -%}
            {%- set extend = device_map.extend([
              {
                'device': matching_dev | join(','),
                'fstype': fs.filesystem_type | default(sap_storage_setup_local_filesystem_type),
                'mountpoint': fs.mountpoint | default(''),
                'name': fs.name,
                'size': fs.disk_size,
              }
            ]) %}
          {%- endif %}
        {%- endif %}
      {%- endfor %}
      {{ device_map }}


# This task combines information to create a mapping list of devices to filesystems.
# Sources:
# - Extravars definition: sap_storage_setup_definition
# - Ansible host facts: hostvars[host_node].ansible_devices
- name: SAP Storage Setup - Set fact for device to filesystem mapping
  ansible.builtin.set_fact:
    volume_map: "{{ volume_map + volume_element }}"
  vars:
    volume_map: []
    volume_element:
      - filesystem_type: "{{ map_item.filesystem_type | default(sap_storage_setup_local_filesystem_type) }}"
        mountpoint: "{{ map_item.mountpoint | default('') }}"
        volume_group: "{{ map_item.lvm_vg_name | default('vg_' + map_item.name) }}"
        volume_name: "{{ map_item.lvm_lv_name | default('lv_' + map_item.name) }}"
        device: |-
          {% for entry in filesystem_device_map %}
          {%- if map_item.name == entry.name -%}
              {{ entry.device }}
          {%- endif %}
          {%- endfor %}
        pesize: "{{ map_item.lvm_vg_physical_extent_size | default('4') }}"
        pv_opts: "{{ map_item.lvm_pv_options | default('') }}"
        vg_opts: "{{ map_item.lvm_vg_options | default('') }}"
        lv_opts: |-
          {% set lvopts = [] %}
          {% if map_item.lvm_lv_stripes is defined and
                map_item.lvm_lv_stripes | int > 0 -%}
            {% set addopt = lvopts.append('--stripes ' + map_item.lvm_lv_stripes | string) %}
          {%- endif %}
          {% if map_item.lvm_lv_stripe_size is defined and
                map_item.lvm_lv_stripe_size | length > 0 -%}
            {% set addopt = lvopts.append('--stripesize ' + map_item.lvm_lv_stripe_size) %}
          {%- endif %}
          {{ lvopts | join(' ') }}

  loop: "{{ sap_storage_setup_definition }}"
  loop_control:
    label: "{{ map_item.name }}"
    loop_var: map_item
  when:
    - map_item.nfs_path is not defined
    - '"nfs" not in map_item.filesystem_type'
    - map_item.swap_path is not defined
    - filesystem_device_map is defined
    - filesystem_device_map | length > 0


- name: SAP Storage Setup - Display local disk setup assignment
  ansible.builtin.debug:
    var: volume_map
  when:
    - volume_map is defined


################

- name: SAP Storage Setup - Configure Volume Groups and Logical Volumes
  ansible.builtin.include_tasks:
    file: "{{ sap_storage_setup_cloud_type }}_tasks/configure_local_filesystems.yml"
  when:
    - volume_map is defined
    - volume_map | length > 0


# NOTE: The conditional of this task requires Jinja2 version >= 2.11.0 (released January 2020)
# Reference: https://jinja.palletsprojects.com/en/3.1.x/templates/#jinja-filters.map
- name: SAP Storage Setup - Configure swap
  ansible.builtin.include_tasks:
    file: "{{ sap_storage_setup_cloud_type }}_tasks/configure_swap.yml"
  when:
    - '"swap" in sap_storage_setup_definition
      | map(attribute="filesystem_type", default=sap_storage_setup_local_filesystem_type)'

- name: SAP Storage Setup - Configure NFS filesystems
  ansible.builtin.include_tasks:
    file: "{{ sap_storage_setup_cloud_type }}_tasks/configure_nfs_filesystems.yml"
  loop: "{{ sap_storage_setup_definition }}"
  loop_control:
    loop_var: nfs_item
    label: "{{ nfs_item.name }}"
  when:
    - nfs_item.nfs_path is defined
    - nfs_item.nfs_server is defined or
      sap_storage_setup_nfs_server is defined
